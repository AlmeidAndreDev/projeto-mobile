{"version":3,"sources":["./src/app/nova-solicitacao-perguntas/nova-solicitacao-perguntas.page.html","./src/app/nova-solicitacao-perguntas/nova-solicitacao-perguntas.module.ts","./src/app/nova-solicitacao-perguntas/nova-solicitacao-perguntas.page.scss","./src/app/nova-solicitacao-perguntas/nova-solicitacao-perguntas.page.ts","./src/models/baseModel.ts","./src/models/requestOrderModel.ts","./src/models/subCategoryModel.ts","./src/services/base.service.ts","./src/services/questions.service.ts"],"names":[],"mappings":"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","file":"nova-solicitacao-perguntas-nova-solicitacao-perguntas-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar class=\\\"ion-text-center\\\" color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{ subCategory.name }} </ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"send()\\\">\\n        Enviar\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <ion-list class=\\\"ion-padding\\\" lines=\\\"none\\\">\\n    <ion-item>\\n      Preencha o formulário abaixo para finalizar sua solicitação\\n    </ion-item>\\n    <ion-item>\\n      <ion-label position=\\\"stacked\\\">Título da Solicitação</ion-label>\\n      <ion-input [(ngModel)]=\\\"request.title\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label position=\\\"stacked\\\">Descreva com detalhes sua solicitação</ion-label>\\n      <ion-textarea rows=\\\"3\\\" [(ngModel)]=\\\"request.description\\\"></ion-textarea>\\n    </ion-item>\\n    <ion-item *ngFor=\\\"let q of questions\\\">\\n      <ion-label class=\\\"ion-text-wrap\\\" position=\\\"stacked\\\">{{q.question}}</ion-label>\\n      <ion-input *ngIf=\\\"q.type === 1\\\" [(ngModel)]=\\\"anserws[q.uid]\\\" [(ngModel)]=\\\"anserws[q.uid]\\\"></ion-input>\\n      <ion-datetime *ngIf=\\\"q.type === 2\\\" doneText=\\\"Ok\\\" cancelText=\\\"Cancelar\\\" [(ngModel)]=\\\"anserws[q.uid]\\\" displayFormat=\\\"DD/MM/YYYY\\\" pickerFormat=\\\"DD MM YYYY\\\"></ion-datetime>\\n      <ion-select *ngIf=\\\"q.type === 3\\\" [(ngModel)]=\\\"anserws[q.uid]\\\" placeholder=\\\"Selecione\\\">\\n        <ion-select-option *ngFor=\\\"let op of getOptions(q)\\\" [value]=\\\"op\\\">{{op}}</ion-select-option>\\n      </ion-select>\\n      <ion-textarea *ngIf=\\\"q.type === 4\\\" [(ngModel)]=\\\"anserws[q.uid]\\\" rows=\\\"6\\\" placeholder=\\\"Descreva melhor...\\\">\\n      </ion-textarea>\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NovaSolicitacaoPerguntasPage } from './nova-solicitacao-perguntas.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NovaSolicitacaoPerguntasPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [NovaSolicitacaoPerguntasPage]\n})\nexport class NovaSolicitacaoPerguntasPageModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL25vdmEtc29saWNpdGFjYW8tcGVyZ3VudGFzL25vdmEtc29saWNpdGFjYW8tcGVyZ3VudGFzLnBhZ2Uuc2NzcyJ9 */\"","import { OrderService } from './../../services/order.service';\nimport { RequestOrderModel } from './../../models/requestOrderModel';\nimport { QuestionsService } from './../../services/questions.service';\nimport { SubCategoryModel } from './../../models/subCategoryModel';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { QuestionModel } from '../../models/questionModel';\nimport { NavController } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\n\n@Component({\n  selector: 'app-nova-solicitacao-perguntas',\n  templateUrl: './nova-solicitacao-perguntas.page.html',\n  styleUrls: ['./nova-solicitacao-perguntas.page.scss'],\n})\nexport class NovaSolicitacaoPerguntasPage implements OnInit {\n\n  subCategory: SubCategoryModel = new SubCategoryModel();\n  questions: Array<QuestionModel> = new Array<QuestionModel>();\n  anserws: any = {};\n  request: RequestOrderModel = new RequestOrderModel();\n\n  constructor(\n    private router: Router,\n    private questionsSrv: QuestionsService,\n    private navCtrl: NavController,\n    private geolocation: Geolocation,\n    private orderSv: OrderService\n  ) { }\n\n  ngOnInit() {\n    try {\n      const { extras } = this.router.getCurrentNavigation();\n      if (extras && extras.state) {\n        this.subCategory = extras.state as SubCategoryModel;\n        this.loadData();\n      } else {\n        this.navCtrl.navigateRoot('/tabs');\n      }\n    } catch (error) {\n      this.navCtrl.navigateRoot('/tabs');\n    }\n  }\n\n  async loadData(): Promise<void> {\n    const result = await this.questionsSrv.getAllQuestions(this.subCategory.uid);\n    if (result.success) {\n      this.questions = result.data as Array<QuestionModel>;\n    }\n  }\n\n  getOptions(question: QuestionModel) {\n    return question.options.split(',').map(o => o.trim());\n  }\n\n  async send() {\n    try {\n      const { coords } = await this.geolocation.getCurrentPosition();\n      this.request.longlat = `${coords.longitude};${coords.latitude}`;\n      this.request.subCategory = this.subCategory.uid;\n      const { success, data } = await this.orderSv.post(this.request);\n      if (success) {\n        // tslint:disable-next-line: forin\n        for (const key in this.anserws) {\n          await this.orderSv.sendAnwser({\n            answer: this.anserws[key],\n            question: key,\n            requestOrder: data.uid\n          });\n        }\n      }\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n}\n\n\n","export abstract class BaseModel {\n  uid: string;\n  createAt: Date;\n  upadateAt: Date;\n}","import { RequestStatus } from './enums/RequestStatus';\nimport { ServiceProviderModel } from './serviceProviderModel';\nimport { UserModel } from './userModel';\nimport { SubCategoryModel } from './subCategoryModel';\nexport class RequestOrderModel {\n  longlat: string;\n  title: string;\n  description: string;\n  statusOrder: RequestStatus;\n  customer: UserModel;\n  subCategory: SubCategoryModel | string;\n  serviceProvider: ServiceProviderModel;\n}","import { BaseModel } from './baseModel';\nimport { CategoryModel } from './categoryModel';\n\nexport class SubCategoryModel extends BaseModel {\n  name: string;\n  cost: number;\n  description: string;\n  category: CategoryModel;\n\n  constructor() {\n    super();\n    this.category = new CategoryModel();\n  }\n}","import { environment } from './../environments/environment';\nimport { HttpService } from './../services/http.service';\nimport { IResultHttp } from '../interfaces/IResultHttp';\n\nexport abstract class BaseService<T> {\n\n  urlBase: string = '';\n\n  constructor(\n    public url: string,\n    public http: HttpService) {\n    this.urlBase = `${environment.url_api}/${this.url}`;\n  }\n\n  public GetAll(): Promise<IResultHttp> {\n    return this.http.get(this.urlBase);\n  }\n\n  public GetById(uid: string): Promise<IResultHttp> {\n    return this.http.get(`${this.urlBase}/${uid}`);\n  }\n\n  public post(model: T): Promise<IResultHttp> {\n    return this.http.post(this.urlBase, model);\n  }\n\n  public put(model: T, uid: string): Promise<IResultHttp> {\n    return this.http.put(`${this.urlBase}/${uid}`, model);\n  }\n\n  public delete(uid: string): Promise<IResultHttp> {\n    return this.http.delete(`${this.urlBase}/${uid}`);\n  }\n\n}","import { QuestionModel } from './../models/questionModel';\nimport { Injectable } from '@angular/core';\nimport { BaseService } from './base.service';\nimport { HttpService } from './http.service';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionsService extends BaseService<QuestionModel> {\n\n  constructor(public http: HttpService) {\n    super('question', http);\n  }\n  getAllQuestions(subCategoryUid: string) {\n    return this.http.get(`${environment.url_api}/subcategory/${subCategoryUid}/questions`);\n  }\n}\n"],"sourceRoot":""}