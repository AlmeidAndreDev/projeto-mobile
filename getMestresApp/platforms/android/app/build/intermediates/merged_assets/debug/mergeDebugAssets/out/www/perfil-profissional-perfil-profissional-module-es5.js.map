{"version":3,"sources":["./src/app/perfil-profissional/perfil-profissional.page.html","./src/app/perfil-profissional/perfil-profissional.module.ts","./src/app/perfil-profissional/perfil-profissional.page.scss","./src/app/perfil-profissional/perfil-profissional.page.ts","./src/models/serviceProviderModel.ts","./src/services/address.service.ts","./src/services/serviceProvider.service.ts"],"names":[],"mappings":"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","file":"perfil-profissional-perfil-profissional-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar class=\\\"ion-text-center\\\" color=\\\"primary\\\">\\n    <ion-title>Perfil</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"save()\\\">\\n        Salvar\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <ion-list>\\n    <div class=\\\"photo-container\\\">\\n      <img (click)=\\\"openLibraryPictures()\\\" [src]=\\\"!!form.photo ? form.photo : 'assets/no-picture.png'\\\" />\\n    </div>\\n    <ion-item-divider>\\n      <ion-label>Dados do usuário</ion-label>\\n    </ion-item-divider>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Nome</ion-label>\\n      <ion-input inputmode=\\\"text\\\" type=\\\"text\\\" placeholder=\\\"João Pedro\\\" [(ngModel)]=\\\"form.name\\\"></ion-input>\\n    </ion-item>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">E-mail</ion-label>\\n      <ion-input inputmode=\\\"email\\\" type=\\\"email\\\" placeholder=\\\"joao@mail.com\\\" [(ngModel)]=\\\"form.email\\\"></ion-input>\\n    </ion-item>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Telefone</ion-label>\\n      <ion-input inputmode=\\\"text\\\" [brmasker]=\\\"{phone: true}\\\" placeholder=\\\"(00) 00000-0000\\\" type=\\\"text\\\"\\n        [(ngModel)]=\\\"form.phone\\\"></ion-input>\\n    </ion-item>\\n  </ion-list>\\n  <ion-list lines=\\\"none\\\">\\n    <ion-item-divider>\\n      <ion-label>Endereço</ion-label>\\n    </ion-item-divider>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">CEP</ion-label>\\n      <ion-input inputmode=\\\"number\\\" placeholder=\\\"00000-000\\\" [(ngModel)]=\\\"form.zipCode\\\"\\n        [brmasker]=\\\"{ mask: '99999-999', type: 'nun' }\\\"></ion-input>\\n    </ion-item>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Endereço</ion-label>\\n      <ion-input type=\\\"text\\\" placeholder=\\\"Rua são joão\\\" [(ngModel)]=\\\"form.address\\\"></ion-input>\\n    </ion-item>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Complemento</ion-label>\\n      <ion-input type=\\\"text\\\" placeholder=\\\"Próximo a travessa 10\\\" [(ngModel)]=\\\"form.addressComplement\\\"></ion-input>\\n    </ion-item>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Estado</ion-label>\\n      <ion-select [value]=\\\"form.state\\\" placeholder=\\\"Selecione\\\" (ionChange)=\\\"selectState($event)\\\">\\n        <ion-select-option *ngFor=\\\"let state of states\\\" [value]=\\\"state.sigla\\\">{{state.nome}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Cidade</ion-label>\\n      <ion-select [disabled]=\\\"cities.length === 0\\\" [value]=\\\"form.city\\\" placeholder=\\\"Selecione\\\">\\n        <ion-select-option *ngFor=\\\"let city of cities\\\" [value]=\\\"city\\\">{{city}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n  </ion-list>\\n  <ion-list lines=\\\"none\\\">\\n    <ion-item-divider>\\n      <ion-label>Cidades Atendidas</ion-label>\\n    </ion-item-divider>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Cidades que eu atendo</ion-label>\\n      <ion-select [disabled]=\\\"cities.length === 0\\\" [(ngModel)]=\\\"citiesCare\\\" multiple placeholder=\\\"Selecione\\\">\\n        <ion-select-option *ngFor=\\\"let city of cities\\\" [value]=\\\"city\\\">{{city}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n  </ion-list>\\n  <ion-list lines=\\\"none\\\">\\n    <ion-item-divider>\\n      <ion-label>Categotis atendidas</ion-label>\\n    </ion-item-divider>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">Categorias</ion-label>\\n      <ion-select [(ngModel)]=\\\"categorySelected\\\" placeholder=\\\"Selecione\\\"  (ionChange)=\\\"loadSubCategory($event.detail.value)\\\">\\n        <ion-select-option *ngFor=\\\"let category of categories\\\" [value]=\\\"category.uid\\\">{{category.name}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-label position=\\\"stacked\\\">SubCategorias</ion-label>\\n      <ion-select [disabled]=\\\"categories.length === 0\\\" [(ngModel)]=\\\"subCategoriesCare\\\" placeholder=\\\"Selecione\\\" multiple>\\n        <ion-select-option *ngFor=\\\"let subCategory of subCategories\\\" [value]=\\\"subCategory.uid\\\">{{subCategory.name}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n  </ion-list>\\n  <ion-list lines=\\\"none\\\">\\n    <ion-item-divider>\\n      <ion-label>Aplicativo</ion-label>\\n    </ion-item-divider>\\n    <ion-item (click)=\\\"changePassword()\\\">\\n      <ion-label>Trocar Senha</ion-label>\\n    </ion-item>\\n    <ion-item (click)=\\\"logout()\\\">\\n      <ion-label>Logout</ion-label>\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\"","import { BrMaskerModule } from 'br-mask';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PerfilProfissionalPage } from './perfil-profissional.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PerfilProfissionalPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    BrMaskerModule\n  ],\n  declarations: [PerfilProfissionalPage]\n})\nexport class PerfilProfissionalPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BlcmZpbC1wcm9maXNzaW9uYWwvcGVyZmlsLXByb2Zpc3Npb25hbC5wYWdlLnNjc3MifQ== */\"","import { SubCategoryService } from './../../services/sub-category.service';\nimport { CategoryService } from './../../services/category.service';\nimport { ICategory } from './../../interfaces/ICategory';\nimport { IAddressState } from './../../interfaces/IAddressState';\nimport { AddressService } from './../../services/address.service';\nimport { ServiceProviderService } from './../../services/serviceProvider.service';\nimport { UserService } from './../../services/user.service';\nimport { AlertController } from '@ionic/angular';\nimport { CameraService } from './../../services/camera.service';\nimport { Component } from '@angular/core';\nimport { ServiceProviderModel } from '../../models/serviceProviderModel';\nimport { AlertService } from '../../services/alert.service';\nimport { environment } from '../../environments/environment';\nimport { ISubCategory } from '../../interfaces/ISubCategory';\n\n@Component({\n  selector: 'app-perfil-profissional',\n  templateUrl: './perfil-profissional.page.html',\n  styleUrls: ['./perfil-profissional.page.scss'],\n})\nexport class PerfilProfissionalPage {\n\n  form: ServiceProviderModel = new ServiceProviderModel();\n  cities: Array<string> = new Array<string>();\n  citiesCare: Array<string> = new Array<string>();\n  states: Array<IAddressState> = new Array<IAddressState>();\n  categories: Array<ICategory> = new Array<ICategory>();\n  subCategories: Array<ISubCategory> = new Array<ISubCategory>();\n  subCategoriesCare: Array<string> = new Array<string>();\n  categorySelected: string;\n\n  constructor(\n    private serviceProviderSrv: ServiceProviderService,\n    private userSrv: UserService,\n    private alertCtrl: AlertController,\n    private alertSrv: AlertService,\n    private cameraSrv: CameraService,\n    private addressSrv: AddressService,\n    private categorySrv: CategoryService,\n    private subCategorySrv: SubCategoryService\n  ) { }\n\n  ionViewDidEnter() {\n    this.loadData();\n    this.loadStates();\n    this.loadCategories();\n  }\n\n  async openLibraryPictures() {\n    const base64 = await this.cameraSrv.getPictureFromLibrary();\n    this.form.photo = base64;\n  }\n\n  async loadStates() {\n    const { success, data } = await this.addressSrv.getAllStates();\n    if (success) {\n      this.states = data as IAddressState[];\n    }\n  }\n\n  async selectState(event) {\n    const state = event.detail.value;\n    const { success, data } = await this.addressSrv.getAllCities(state);\n    if (success) {\n      this.cities = data as string[];\n    }\n  }\n\n  async loadData() {\n    const { success, data } = await this.serviceProviderSrv.GetById(this.userSrv.UserData.uid);\n    if (success) {\n      this.form = data as ServiceProviderModel;\n      this.fixPathPhoto();\n    }\n  }\n\n  async loadCategories() {\n    const { success, data } = await this.categorySrv.GetAll();\n    if (success) {\n      this.categories = data as ICategory[];\n    }\n  }\n\n  async loadSubCategory(categoridUid: string) {\n    const { success, data } = await this.subCategorySrv.getAllByCategory(categoridUid);\n    if (success) {\n      this.subCategories = data as ISubCategory[];\n    } else {\n      this.subCategories = [];\n    }\n  }\n\n  fixPathPhoto() {\n    if (this.form.photo) {\n      this.form.photo = `${environment.url_api}/storage/${this.form.photo}`;\n    }\n  }\n\n  async save() {\n    this.form.categoriesCare = this.subCategoriesCare.join(', ');\n    this.form.citiesCare = this.citiesCare.join(', ');\n    const { success, data } = await this.serviceProviderSrv.post(this.form);\n    if (success) {\n      this.form = data;\n      this.fixPathPhoto();\n      this.alertSrv.toast('Perfil atualizado com sucesso!');\n    }\n  }\n\n\n  async changePasswordHandle(currentPassword: string, newPassword: string, confirmNewPassword: string) {\n    const { success } = await this.serviceProviderSrv.changePassword(currentPassword, newPassword, confirmNewPassword);\n    if (success) {\n      this.alertSrv.toast('Senha alterada com sucesso');\n    }\n  }\n\n  async changePassword() {\n    (\n      await this.alertCtrl.create({\n        header: 'Trocar Senha',\n        inputs: [\n          { placeholder: 'Digite sua senha atual', type: 'password', name: 'currentPassword' },\n          { placeholder: 'Digite a nova senha', type: 'password', name: 'newPassword' },\n          { placeholder: 'Digite a confirmação senha', type: 'password', name: 'confirmNewPassword' }\n        ],\n        buttons: [\n          { text: 'Cancelar', handler: () => { } },\n          {\n            text: 'Salvar', handler: ({ currentPassword, newPassword, confirmNewPassword }) => {\n              if (!newPassword || !confirmNewPassword || !currentPassword) {\n                this.alertSrv.toast('Digite todas as informações antes de continuar!');\n                return false;\n              } else {\n                this.changePasswordHandle(currentPassword, newPassword, confirmNewPassword);\n              }\n            }\n          }\n        ]\n      })\n    ).present();\n\n  }\n\n  logout() {\n    this.userSrv.logout();\n  }\n\n}\n","import { BaseModel } from './baseModel';\n\nexport class ServiceProviderModel extends BaseModel {\n  name: string;\n  photo: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  description: string;\n  address: string;\n  addressComplement: string;\n  state: string;\n  city: string;\n  zipCode: string;\n  citiesCare: string;\n  categoriesCare: string;\n  phone: string;\n}","import { environment } from './../environments/environment';\nimport { HttpService } from './http.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class AddressService {\n  \n  constructor(private http: HttpService) { }\n\n  getAllStates() {\n    return this.http.get(`${environment.url_api}/address`);\n  }\n  getAllCities(state: string) {\n    return this.http.get(`${environment.url_api}/address/${state}`);\n  }\n}","import { ServiceProviderModel } from './../models/serviceProviderModel';\nimport { HttpService } from './http.service';\nimport { Injectable } from '@angular/core';\nimport { BaseService } from './base.service';\nimport { CustomerModel } from '../models/customerModel';\n\n@Injectable({ providedIn: 'root' })\nexport class ServiceProviderService extends BaseService<ServiceProviderModel> {\n\n  constructor(\n    public http: HttpService\n  ) {\n    super('serviceProvider', http);\n  }\n\n  changePassword(currentPassword: string, newPassword: string, confirmNewPassword: string) {\n    return this.http.post(`${this.urlBase}/changepassword`, { currentPassword, newPassword, confirmNewPassword });\n  }\n\n}"],"sourceRoot":""}